== Tips and Tricks ==

Here's a collection of common questions made on the mailing list and 
solutions proposed.

=== Configuration Files Are Getting Big and Hard to Mantain ===

You can split your configuration files in several files so it can be 
easier to mantain.

----
config/typus/001-application.yml
config/typus/001-application_roles.yml
config/typus/002-newsletter.yml
config/typus/002-newsletter_roles.yml
config/typus/003-blog.yml
config/typus/003-blog_roles.yml
----

NOTE: Remember files are loaded alphabetically and last loaded files 
overwrite previous settings.

=== Testing the Plugin ===

Clone the repository and run the tests.

----
$ git clone git://github.com/fesplugas/typus.git
$ cd typus
$ rake
----

By default tests are be performed against a SQLite3 database in 
memory. You can also run tests against PostgreSQL and MySQL 
databases. (database name is +typus_test+)

----
$ rake DB=mysql
$ rake DB=postgresql
----

=== Is it Possible to Use Single Table Inheritance? ===

Single Table Inheritance is **Typus** is relatively simple. For each 
model you have inheriting from a base table you need to have an entry 
in the +application.yml+ file.

Because all models carry the same attributes its possible to create 
an anchored node +(&NAME)+ in the YAML file and then merge that into 
the inheriting nodes with the hash merges +(<<)+ and node reference 
+(*NAME)+, as per the following example:

----
Property: &PROP_BASE
  fields:
    list: address, suburb, ...(chopped)... is_active, visits, is_featured, agency, user
    form: street_number, ...(chopped)... is_under_offer
    show: id, street_number, ...(chopped)... agency, user
    options:
      selectors: property_type, type
  relationships: agency, user
  application: Property Guide

SaleProperty:
  <<: *PROP_BASE

RentalProperty:
  <<: *PROP_BASE

ShareRentalProperty:
  <<: *PROP_BASE

HolidayRentalProperty:
  <<: *PROP_BASE
----

This will setup the parameters which typus will look for when making 
the resources available. In order to make the resources accessible 
you will need to add the following entries into the +application_roles.yml+:

----
admin:
  # Property not listed which means that it isn't shown.
  SaleProperty: all
  RentalProperty: all
  HolidayRentalProperty: all
  ShareRentalProperty: all
----

In addition to this the controller class files also need to be created 
in the +app/controllers/admin+ directory (e.g. +sale_property_controller.rb+, 
which is class +class Admin::SalePropertiesController < Admin::ResourcesController+)

Once this is done, restart your Rails application and visit the admin 
route - the new STI tables should now be available.

NOTE: Written by http://amasses.net/[Matthew Savage].

=== Does Typus Support Namespaced Models? ===

If you want to be able to use +delayed_job+ you need to add the following 
two lines to your `config/routes.rb` file before +Typus::Routes.draw(map)+.

----
map.connect "admin/delayed/jobs/:action/:id", :controller => "admin/delayed/jobs"
map.connect "admin/delayed/jobs/:action/:id.:format", :controller => "admin/delayed/jobs"
----

And then create and configure +config/typus/delayed_job.yml+ and 
+config/typus/delayed_job_roles.yml+ as you do with your other models.

File +config/typus/delayed_job.yml+:

----
Delayed::Job:
  fields:
    list: ...
    form: ...
  search: ...
----

File +config/typus/delayed_job_roles.yml+:

----
admin:
  Delayed::Job: all
----
