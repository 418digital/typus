module TypusRoutes

  def self.included(base)
    base.class_eval do
      alias_method :draw_without_goldberg_routes, :draw
      alias_method :draw, :draw_with_goldberg_routes
    end
  end

  def draw_with_goldberg_routes(&block)
    
    draw_without_goldberg_routes do |map|
      block.call map 
    end

    #class ActionController::Routing::RouteSet
    #  alias draw_without_admin draw
    #  def draw_with_admin
    #    draw_without_admin do |map|
    #      prefix = 'admin'
    #      map.login "#{prefix}/login", :controller => 'sessions', :action => 'create'
    #      map.logout "#{prefix}/logout", :controller => 'sessions', :action => 'destroy'
    #      map.password_recover "#{prefix}/password_recover", :controller => 'sessions', :action => 'password_recover'
    #      map.with_options :controller => 'typus' do |i|
    #        i.admin "#{prefix}", :action => 'index'
    #        i.connect "#{prefix}/-/:action/:id", :action => 'index', :requirements => { :model => nil }
    #        i.connect "#{prefix}/asset/*path", :action => 'asset'
    #        i.connect "#{prefix}/:model/:action", :action => 'index', :requirements => { :action => /[^0-9].*/, :id => nil }
    #        i.connect "#{prefix}/:model/:id/:action", :action => 'edit', :requirements => { :id => /\d+/ }
    #      end
    #      yield map
    #    end
    #  end
    #  alias draw draw_with_admin
    #end
    
    prefix = 'admin'
    
    routes = [["#{prefix}/login", {:controller => 'sessions', :action => 'create'}],
              ["#{prefix}/logout", {:controller => 'sessions', :action => 'destroy'}],
              ["#{prefix}/password_recover", {:controller => 'sessions', :action => 'password_recover'}],
              ["#{prefix}", {:controller => 'typus', :action => 'index'}],
              ["#{prefix}/-/:action/:id", {:controller => 'typus', :action => 'index', :requirements => {:model => nil}}],
              ["#{prefix}/:model/:action", {:controller => 'typus', :action => 'index', :requirements => { :action => /[^0-9].*/, :id => nil }}],
              ["#{prefix}/:model/:id/:action", {:controller => 'typus', :action => 'edit', :requirements => { :id => /\d+/ }}]
             ]

    route_method = ActionController::Routing::Routes.respond_to?(:add_route)?
    :add_route : :connect

    routes.each do |route|
      ActionController::Routing::Routes.send(route_method, *route)
    end

#    # Install the new routes (Rails 1.1 only)
#    if ActionController::Routing::Routes.respond_to? :write_generation and
#        ActionController::Routing::Routes.respond_to? :write_recognition
#      ActionController::Routing::Routes.write_generation
#      ActionController::Routing::Routes.write_recognition
#    end 
  
  end
end

ActionController::Routing::RouteSet.class_eval do
  include TypusRoutes
end
